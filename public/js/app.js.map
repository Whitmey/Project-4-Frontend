{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/game.js","js/controllers/games.js","js/controllers/main.js","js/models/profile.js","js/controllers/profiles.js","js/models/review.js","js/controllers/reviews.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","authenticate","provider","res","console","log","Game","$resource","id","update","method","GamesIndexController","gamesIndex","all","query","GamesNewController","create","save","gamesNew","GamesShowController","Profile","deleteGame","gamesShow","$remove","game","get","params","$promise","profiles","game_id","delete","isLoggedIn","isAuthenticated","GamesEditController","gamesEdit","$update","MainController","$rootScope","logout","secureState","e","toState","main","message","protectedState","includes","name","preventDefault","$on","ProfilesIndexController","profilesIndex","ProfilesNewController","profilesNew","user_id","getPayload","ProfilesShowController","Review","deleteProfile","profilesShow","profile","loggedInUserId","reviews","profile_id","ProfilesEditController","profilesEdit","ReviewsIndexController","reviewsIndex","ReviewsNewController","reviewsNew","ReviewsShowController","deleteReview","reviewsShow","ReviewsEditController","reviewsEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n.controller('RegisterController', RegisterController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then((res) => {\n      console.log(res);\n    });\n  }\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('finalProject')\n  .factory('Game', Game);\n\nGame.$inject = ['$resource', 'API_URL'];\nfunction Game($resource, API_URL) {\n  return new $resource(`${API_URL}/games/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('GamesIndexController', GamesIndexController)\n.controller('GamesNewController', GamesNewController)\n.controller('GamesShowController', GamesShowController)\n.controller('GamesEditController', GamesEditController);\n\nGamesIndexController.$inject = ['Game'];\nfunction GamesIndexController(Game) {\n  const gamesIndex = this;\n\n  gamesIndex.all = Game.query();\n}\n\nGamesNewController.$inject = ['Game', '$state'];\nfunction GamesNewController(Game, $state) {\n  const gamesNew = this;\n\n  gamesNew.user = {};\n\n  function create() {\n    Game.save(gamesNew.user, () => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  gamesNew.create = create;\n}\n\nGamesShowController.$inject = ['Game', 'Profile', '$state', '$auth'];\nfunction GamesShowController(Game, Profile, $state , $auth) {\n  const gamesShow = this;\n\n  gamesShow.game = Game.get($state.params);\n  gamesShow.game.$promise.then((game) => {\n    gamesShow.profiles = Profile.query({ game_id: game.id });\n  });\n\n\n  function deleteGame() {\n    console.log('I\\'m trying to delete a game...');\n    gamesShow.user.$remove(() => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  gamesShow.delete = deleteGame;\n  gamesShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nGamesEditController.$inject = ['Game', '$state'];\nfunction GamesEditController(Game, $state) {\n  const gamesEdit = this;\n\n  gamesEdit.user = Game.get($state.params);\n\n  function update() {\n    gamesEdit.user.$update(() => {\n      $state.go('gamesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedState = ['userEdit'];\n\n  function secureState(e, toState) {\n    // console.log(toState);\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedState.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Profile', Profile);\n\nProfile.$inject = ['$resource', 'API_URL'];\nfunction Profile($resource, API_URL) {\n  return new $resource(`${API_URL}/profiles/:id`, { id: '@id' }, {\n    update: { method: 'PUT' },\n    create: { method: 'POST' }\n  });\n}\n","angular.module('finalProject')\n.controller('ProfilesIndexController', ProfilesIndexController)\n.controller('ProfilesNewController', ProfilesNewController)\n.controller('ProfilesShowController', ProfilesShowController)\n.controller('ProfilesEditController', ProfilesEditController);\n\nProfilesIndexController.$inject = ['Profile'];\nfunction ProfilesIndexController(Profile) {\n  const profilesIndex = this;\n\n  profilesIndex.all = Profile.query();\n}\n\nProfilesNewController.$inject = ['Profile', '$state', '$auth'];\nfunction ProfilesNewController(Profile, $state, $auth) {\n  const profilesNew = this;\n\n  profilesNew.user = {};\n  profilesNew.user.user_id = $auth.getPayload().id; //Gets the current user\n\n  function create() {\n    Profile.save(profilesNew.user, () => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  profilesNew.create = create;\n}\n\nProfilesShowController.$inject = ['Profile', 'Review', '$state', '$auth'];\nfunction ProfilesShowController(Profile, Review, $state , $auth) {\n  const profilesShow = this;\n\n  profilesShow.loggedInUserId = $auth.getPayload().id; //Gets the current user\n  profilesShow.profile = Profile.get($state.params); //Gets the current profile\n  profilesShow.profile.$promise.then((profile) => {\n    profilesShow.reviews = Review.query({ profile_id: profile.id });\n  });\n\n  function deleteProfile() {\n    // console.log('I\\'m trying to delete a user...');\n    profilesShow.profile.$remove(() => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  profilesShow.delete = deleteProfile;\n  profilesShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nProfilesEditController.$inject = ['Profile', '$state'];\nfunction ProfilesEditController(Profile, $state) {\n  const profilesEdit = this;\n\n  profilesEdit.user = Profile.get($state.params);\n\n  function update() {\n    profilesEdit.user.$update(() => {\n      $state.go('profilesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n  .factory('Review', Review);\n\nReview.$inject = ['$resource', 'API_URL'];\nfunction Review($resource, API_URL) {\n  return new $resource(`${API_URL}/reviews/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ReviewsIndexController', ReviewsIndexController)\n.controller('ReviewsNewController', ReviewsNewController)\n.controller('ReviewsShowController', ReviewsShowController)\n.controller('ReviewsEditController', ReviewsEditController);\n\nReviewsIndexController.$inject = ['Review'];\nfunction ReviewsIndexController(Review) {\n  const reviewsIndex = this;\n\n  reviewsIndex.all = Review.query();\n}\n\nReviewsNewController.$inject = ['Review', '$state', '$auth'];\nfunction ReviewsNewController(Review, $state, $auth) {\n  const reviewsNew = this;\n\n  reviewsNew.user = {};\n  reviewsNew.user.user_id = $auth.getPayload().id; // Gets current user\n  // reviewsNew.user.profile_id = reviewsNew.show.profile.id;\n  // console.log(reviewsNew.user);\n  // Need to get current profile_id set here\n\n  function create() {\n    Review.save(reviewsNew.user, () => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  reviewsNew.create = create;\n}\n\nReviewsShowController.$inject = ['Review', '$state', '$auth'];\nfunction ReviewsShowController(Review, $state , $auth) {\n  const reviewsShow = this;\n\n  reviewsShow.user = Review.get($state.params);\n\n  function deleteReview() {\n    // console.log('I\\'m trying to delete a user...');\n    reviewsShow.user.$remove(() => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  reviewsShow.delete = deleteReview;\n  reviewsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nReviewsEditController.$inject = ['Review', '$state'];\nfunction ReviewsEditController(Review, $state) {\n  const reviewsEdit = this;\n\n  reviewsEdit.user = Review.get($state.params);\n\n  function update() {\n    reviewsEdit.user.$update(() => {\n      $state.go('reviewsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n.config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/usersShow.html',\n    controller: 'UsersShowController as show'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('profilesIndex', {\n    url: '/profiles',\n    templateUrl: '/templates/profilesIndex.html',\n    controller: 'ProfilesIndexController as profilesIndex'\n  })\n  .state('profilesShow', {\n    url: '/profiles/:id',\n    templateUrl: '/templates/profilesShow.html',\n    controller: 'ProfilesShowController as show'\n  })\n  .state('profilesEdit', {\n    url: '/profiles/:id/edit',\n    templateUrl: '/templates/profilesEdit.html',\n    controller: 'ProfilesEditController as profilesEdit'\n  })\n  .state('gamesIndex', {\n    url: '/games',\n    templateUrl: '/templates/gamesIndex.html',\n    controller: 'GamesIndexController as gamesIndex'\n  })\n  .state('gamesShow', {\n    url: '/games/:id',\n    templateUrl: '/templates/gamesShow.html',\n    controller: 'GamesShowController as game'\n  })\n  .state('gamesEdit', {\n    url: '/games/:id/edit',\n    templateUrl: '/templates/gamesEdit.html',\n    controller: 'GamesEditController as gamesEdit'\n  })\n  .state('reviewsIndex', {\n    url: '/reviews',\n    templateUrl: '/templates/reviewsIndex.html',\n    controller: 'ReviewsIndexController as reviewsIndex'\n  })\n  .state('reviewsShow', {\n    url: '/reviews/:id',\n    templateUrl: '/templates/reviewsShow.html',\n    controller: 'ReviewsShowController as review'\n  })\n  .state('reviewsEdit', {\n    url: '/reviews/:id/edit',\n    templateUrl: '/templates/reviewsEdit.html',\n    controller: 'ReviewsEditController as reviewsEdit'\n  })\n  .state('home', {\n    url: '/home',\n    templateUrl: '/templates/home.html'\n  })\n  .state('landing', {\n    url: '/landing',\n    templateUrl: '/templates/landing.html'\n  })\n  .state('createProfile', {\n    url: '/createProfile',\n    templateUrl: '/templates/createProfile.html',\n    controller: 'ProfilesNewController as profilesNew'\n  });\n\n  $urlRouterProvider.otherwise('/home');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersNewController', UsersNewController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersNew.create = create;\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state , $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    // console.log('I\\'m trying to delete a user...');\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}