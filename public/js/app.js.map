{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/game.js","js/controllers/games.js","js/controllers/main.js","js/models/profile.js","js/controllers/profiles.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","authenticate","provider","res","console","log","Game","$resource","id","update","method","GamesIndexController","gamesIndex","all","query","GamesNewController","create","save","gamesNew","GamesShowController","deleteGame","gamesShow","$remove","get","params","delete","isLoggedIn","isAuthenticated","GamesEditController","gamesEdit","$update","MainController","$rootScope","logout","secureState","e","toState","main","message","protectedState","includes","name","preventDefault","$on","Profile","ProfilesIndexController","profilesIndex","ProfilesNewController","profilesNew","ProfilesShowController","deleteProfile","profilesShow","ProfilesEditController","profilesEdit","Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersNewController","usersNew","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n.controller('RegisterController', RegisterController)\n.controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n    .then(() => {\n      $state.go('login');\n    });\n  }\n\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then((res) => {\n      console.log(res);\n    });\n  }\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('finalProject')\n  .factory('Game', Game);\n\nGame.$inject = ['$resource', 'API_URL'];\nfunction Game($resource, API_URL) {\n  return new $resource(`${API_URL}/games/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('GamesIndexController', GamesIndexController)\n.controller('GamesNewController', GamesNewController)\n.controller('GamesShowController', GamesShowController)\n.controller('GamesEditController', GamesEditController);\n\nGamesIndexController.$inject = ['Game'];\nfunction GamesIndexController(Game) {\n  const gamesIndex = this;\n\n  gamesIndex.all = Game.query();\n}\n\nGamesNewController.$inject = ['Game', '$state'];\nfunction GamesNewController(Game, $state) {\n  const gamesNew = this;\n\n  gamesNew.user = {};\n\n  function create() {\n    Game.save(gamesNew.user, () => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  gamesNew.create = create;\n}\n\nGamesShowController.$inject = ['Game', '$state', '$auth'];\nfunction GamesShowController(Game, $state , $auth) {\n  const gamesShow = this;\n\n  gamesShow.user = Game.get($state.params);\n\n  function deleteGame() {\n    // console.log('I\\'m trying to delete a user...');\n    gamesShow.user.$remove(() => {\n      $state.go('gamesIndex');\n    });\n  }\n\n  gamesShow.delete = deleteGame;\n  gamesShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nGamesEditController.$inject = ['Game', '$state'];\nfunction GamesEditController(Game, $state) {\n  const gamesEdit = this;\n\n  gamesEdit.user = Game.get($state.params);\n\n  function update() {\n    gamesEdit.user.$update(() => {\n      $state.go('gamesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  const protectedState = ['userEdit'];\n\n  function secureState(e, toState) {\n    // console.log(toState);\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedState.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('login');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('Profile', Profile);\n\nProfile.$inject = ['$resource', 'API_URL'];\nfunction Profile($resource, API_URL) {\n  return new $resource(`${API_URL}/profiles/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('ProfilesIndexController', ProfilesIndexController)\n.controller('ProfilesNewController', ProfilesNewController)\n.controller('ProfilesShowController', ProfilesShowController)\n.controller('ProfilesEditController', ProfilesEditController);\n\nProfilesIndexController.$inject = ['Profile'];\nfunction ProfilesIndexController(Profile) {\n  const profilesIndex = this;\n\n  profilesIndex.all = Profile.query();\n}\n\nProfilesNewController.$inject = ['Profile', '$state'];\nfunction ProfilesNewController(Profile, $state) {\n  const profilesNew = this;\n\n  profilesNew.user = {};\n\n  function create() {\n    Profile.save(profilesNew.user, () => {\n      $state.go('profilesIndex');\n    });\n  }\n\n  profilesNew.create = create;\n}\n\nProfilesShowController.$inject = ['Profile', '$state', '$auth'];\nfunction ProfilesShowController(Profile, $state , $auth) {\n  const profilesShow = this;\n\n  profilesShow.user = Profile.get($state.params);\n\n  function deleteProfile() {\n    // console.log('I\\'m trying to delete a user...');\n    profilesShow.user.$remove(() => {\n      $state.go('profilesIndex');\n    });\n  }\n\n  profilesShow.delete = deleteProfile;\n  profilesShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nProfilesEditController.$inject = ['Profile', '$state'];\nfunction ProfilesEditController(Profile, $state) {\n  const profilesEdit = this;\n\n  profilesEdit.user = Profile.get($state.params);\n\n  function update() {\n    profilesEdit.user.$update(() => {\n      $state.go('profilesShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n.config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('usersIndex', {\n    url: '/users',\n    templateUrl: '/templates/usersIndex.html',\n    controller: 'UsersIndexController as usersIndex'\n  })\n  .state('usersShow', {\n    url: '/users/:id',\n    templateUrl: '/templates/usersShow.html',\n    controller: 'UsersShowController as show'\n  })\n  .state('usersEdit', {\n    url: '/users/:id/edit',\n    templateUrl: '/templates/usersEdit.html',\n    controller: 'UsersEditController as usersEdit'\n  })\n  .state('register', {\n    url: '/register',\n    templateUrl: '/templates/register.html',\n    controller: 'RegisterController as register'\n  })\n  .state('login', {\n    url: '/login',\n    templateUrl: '/templates/login.html',\n    controller: 'LoginController as login'\n  })\n  .state('profilesIndex', {\n    url: '/profiles',\n    templateUrl: '/templates/profilesIndex.html',\n    controller: 'ProfilesIndexController as profilesIndex'\n  })\n  .state('profilesShow', {\n    url: '/profiles/:id',\n    templateUrl: '/templates/profilesShow.html',\n    controller: 'ProfilesShowController as profile'\n  })\n  .state('profilesEdit', {\n    url: '/profiles/:id/edit',\n    templateUrl: '/templates/profilesEdit.html',\n    controller: 'ProfilesEditController as profilesEdit'\n  })\n  .state('gamesIndex', {\n    url: '/games',\n    templateUrl: '/templates/gamesIndex.html',\n    controller: 'GamesIndexController as gamesIndex'\n  })\n  .state('gamesShow', {\n    url: '/games/:id',\n    templateUrl: '/templates/gamesShow.html',\n    controller: 'GamesShowController as game'\n  })\n  .state('gamesEdit', {\n    url: '/games/:id/edit',\n    templateUrl: '/templates/gamesEdit.html',\n    controller: 'GamesEditController as gamesEdit'\n  });\n\n  $urlRouterProvider.otherwise('/users');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersNewController', UsersNewController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersNewController.$inject = ['User', '$state'];\nfunction UsersNewController(User, $state) {\n  const usersNew = this;\n\n  usersNew.user = {};\n\n  function create() {\n    User.save(usersNew.user, () => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersNew.create = create;\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state , $auth) {\n  const usersShow = this;\n\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    // console.log('I\\'m trying to delete a user...');\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nUsersEditController.$inject = ['User', '$state'];\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n"]}